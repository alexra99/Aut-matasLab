import java_cup.runtime.*;
import java.io;

parser code {:
	public static void main (String args[]) throws Exception{
		FileInputStream f = new FileInputStream(args[0]);
		DataInputStream r = new DataInputStream(f);
		try{
			new parser(new Yylex(r)).parse();
		}
		catch (Exception e){
			System.out.println("Análisis incorrecto");
			System.exit(1);
		}
		System.out.println("Análisis correcto");
	}
:}

terminal 	NUMERO, ENTERO, BOOLEAN, RETORNO, NORETORNO, 
		VARIABLE, SALTODELINEA, ASIGNACION, PUNTUACION, BUCLE, 
		SUMA, RESTA, POR, ENTRE, RELACIONAL, 
		LOGICA, ESPACIO, PARENTESIS, LLAVE, VERDAFALSO,
		MAIN, PUBLIC, STATIC, CLASS;

non terminal 	lambda, clase, dentroclase, funciones, argumentos, 
		argumentosaux, resto, restoaux, declaracion, asignacion, 
		llamadafuncion, argumentosllamada, buclefor, buclewhile, bucledowhile, 
		retorno, expresionlogica, expresionnumerica;

precedence left SUMA, RESTA;
precedence left POR, ENTRE;


lambda ::=  ;


clase ::= PUBLIC CLASS VARIABLE LLAVEABIERTA dentroclase LLAVECERRADA;
dentroclase ::= PUBLIC STATIC VOID MAIN LLAVEABIERTA resto LLAVECERRADA funciones;

funciones ::= lambda 
	| PUBLIC STATIC declaracion argumentos LLAVEABIERTA resto LLAVECERRADA funciones
	| PUBLIC STATIC VOID VARIABLE argumentos LLAVEABIERTA resto LLAVECERRADA funciones;
argumentos ::= PARENTESISABIERTO PARENTESISCERRADO
	| PARENTESISABIERTO argumentosaux PARENTESISCERRADO;
argumentosaux ::= declaracion COMA argumentosaux 
	| declaracion;


resto ::= lambda 
	| restoaux PUNTOYCOMA resto
	| buclefor resto
	| buclewhile resto;
restoaux ::= declaracion 
	| INCREMENTO
	| DECREMENTO
	| asignacion 
	| llamadafuncion
	| bucledowhile
	| retorno;


declaracion ::= BOOLEAN VARIABLE 
	| ENTERO VARIABLE;

asignacion ::= VARIABLE ASIGNACION expresionlogica
	| VARIABLE ASIGNACION expresionnumerica
	| VARIABLE ASIGNACION NUMERO
	| VARIABLE ASIGNACION VERDAFALSO
	| VARIABLE ASIGNACION VARIABLE
	| VARIABLE ASIGNACION llamadafuncion;

llamadafuncion ::= VARIABLE PARENTESISABIERTO argumentosllamada PARENTESISCERRADO;
argumentosllamada ::= VARIABLE | VARIABLE COMA argumentosllamada;

buclefor ::= FOR PARENTESISABIERTO ENTERO VARIABLE ASIGNACION NUMERO PUNTOYCOMA expresionlogica PUNTOYCOMA asigfor PARENTESISCERRADO LLAVEABIERTA resto LLAVECERRADA;
asigfor ::= lambda | INCREMENTO | DECREMENTO | asignacion;

buclewhile ::= WHILE PARENTESISABIERTO expresionlogica PARENTESISCERRADO LLAVEABIERTA resto LLAVECERRADA;

bucledowhile ::= DO LLAVEABIERTA resto LLAVECERRADA WHILE PARENTESISABIERTO expresionlogica PARENTESISCERRADO;

retorno ::= RETORNO NUMERO
	| RETORNO VERDAFALSO
	| RETORNO expresionnumerica
	| RETORNO expresionlogica
	| RETORNO VARIABLE


expresionlogica ::= VARIABLE LOGICA VARIABLES
	| VARIABLE LOGICA NUMERO
	| NUMERO LOGICA VARIABLE
	| NUMERO LOGICA NUMERO
	| expresionnumerica LOGICA NUMERO
	| expresionnumerica LOGICA VARIABLE
	| expresionnumerica LOGICA expresionnumerica
	| NUMERO LOGICA expresionnumerica
	| VARIABLE LOGICA expresionnumerica
	| expresionnumerica RELACIONAL NUMERO
	| expresionnumerica RELACIONAL VARIABLE
	| expresionnumerica RELACIONAL expresionnumerica
	| NUMERO RELACIONAL expresionnumerica
	| VARIABLE RELACIONAL expresionnumerica

expresionnumerica ::= NUMERO SUMA NUMERO
	| NUMERO SUMA VARIABLE
	| VARIABLE SUMA NUMERO
	| VARIABLE SUMA VARIABLE
	| NUMERO RESTA NUMERO
	| NUMERO RESTA VARIABLE
	| VARIABLE RESTA NUMERO
	| VARIABLE RESTA VARIABLE
	| NUMERO POR NUMERO
	| NUMERO POR VARIABLE
	| VARIABLE POR NUMERO
	| VARIABLE POR VARIABLE
	| NUMERO ENTRE NUMERO
	| NUMERO ENTRE VARIABLE
	| VARIABLE ENTRE NUMERO
	| VARIABLE ENTRE VARIABLE
